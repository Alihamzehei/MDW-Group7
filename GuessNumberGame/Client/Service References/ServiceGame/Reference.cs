//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceGame {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Server", ConfigurationName="ServiceGame.IGame", CallbackContract=typeof(Client.ServiceGame.IGameCallback))]
    public interface IGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="Server/IGame/CheckNumber", ReplyAction="Server/IGame/CheckNumberResponse")]
        string CheckNumber(int[] number, Server.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="Server/IGame/CheckNumber", ReplyAction="Server/IGame/CheckNumberResponse")]
        System.Threading.Tasks.Task<string> CheckNumberAsync(int[] number, Server.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="Server/IGame/QuitGame", ReplyAction="Server/IGame/QuitGameResponse")]
        void QuitGame(Server.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="Server/IGame/QuitGame", ReplyAction="Server/IGame/QuitGameResponse")]
        System.Threading.Tasks.Task QuitGameAsync(Server.Player player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="Server/IGame/OnGameInterupted", ReplyAction="Server/IGame/OnGameInteruptedResponse")]
        void OnGameInterupted(Server.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="Server/IGame/OnWinner", ReplyAction="Server/IGame/OnWinnerResponse")]
        void OnWinner(Server.Player player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChannel : Client.ServiceGame.IGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameClient : System.ServiceModel.DuplexClientBase<Client.ServiceGame.IGame>, Client.ServiceGame.IGame {
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string CheckNumber(int[] number, Server.Player player) {
            return base.Channel.CheckNumber(number, player);
        }
        
        public System.Threading.Tasks.Task<string> CheckNumberAsync(int[] number, Server.Player player) {
            return base.Channel.CheckNumberAsync(number, player);
        }
        
        public void QuitGame(Server.Player player) {
            base.Channel.QuitGame(player);
        }
        
        public System.Threading.Tasks.Task QuitGameAsync(Server.Player player) {
            return base.Channel.QuitGameAsync(player);
        }
    }
}
